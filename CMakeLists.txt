cmake_minimum_required(VERSION 2.8)
project(broadcast)

set(CMAKE_CXX_FLAGS                "-Wall -std=c++11")
set(CMAKE_CXX_FLAGS_DEBUG          "-O0 -g")
set(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules")

find_package(Crypto REQUIRED)
include_directories(${CRYPTO_INCLUDE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_executable(broadcast test/broadcast.cpp)
target_link_libraries(broadcast ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(broadcast -lrt)
  target_link_libraries(broadcast -lpthread)
endif()

add_executable(select test/select.cpp)
target_link_libraries(select ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(select -lrt)
  target_link_libraries(select -lpthread)
endif()

add_executable(queue test/queue.cpp)
target_link_libraries(queue ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(queue -lrt)
  target_link_libraries(queue -lpthread)
endif()

add_executable(receive test/receive.cpp)
target_link_libraries(receive ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(receive -lrt)
  target_link_libraries(receive -lpthread)
endif()

add_executable(packet test/packet.cpp)
target_link_libraries(packet ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(packet -lrt)
  target_link_libraries(packet -lpthread)
endif()

add_executable(app example/app.cpp)
target_link_libraries(app ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(app -lrt)
  target_link_libraries(app -lpthread)
endif()

add_executable(timer test/timer.cpp)
target_link_libraries(timer ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(timer -lrt)
  target_link_libraries(timer -lpthread)
endif()

add_executable(time test/time.cpp)
target_link_libraries(time ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(time -lrt)
  target_link_libraries(time -lpthread)
endif()

add_executable(laptop_test example/laptop_test.cpp)
target_link_libraries(laptop_test ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(laptop_test -lrt)
  target_link_libraries(laptop_test -lpthread)
endif()

add_executable(sphere_test example/sphere_test.cpp)
target_link_libraries(sphere_test ${CRYPTO_LIBRARIES})
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  target_link_libraries(sphere_test -lrt)
  target_link_libraries(sphere_test -lpthread)
endif()
